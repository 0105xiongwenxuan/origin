DAY1
1.测试基础
2.测试过程

DAY2
1.测试方法
2.软件质量
3.覆盖率

DAY3
1.系统测试（性能有哪些类型，分别是什么意思）
2.测试用例写作(用例八大项)
3.缺陷管理

以下软件生命周期（重点知识，要能自己全部讲出来）
1.项目计划
项目计划是谁写的？ 项目经理（PM）
项目计划什么时候写的？项目启动之前写。
测试计划里面包含的主要内容：
3W
who：人员（做项目有哪些人）
when：时间（什么时间段做什么事情）
what：什么事情（做研发这个项目我们要做哪些事情）
项目资源、项目风险、技术困难点、项目背景、受用人群，包括使用的技术条件。

测试计划要写成文档。

需求是谁来做的？需求分析工程师，系统架构师（SE）
需求是什么时候做？计划出来之后就可以开始做。
需求分析包含哪些内容：
1.客户希望我们做的软件应该做什么样的事情。
2.客户不希望我们做的软件不应该做什么样的事情。

设计时谁来做的？SE系统架构师
设计什么时候来做？需求分析完成之后就可以做系统设计
系统设计内容：
需求规格说明书（SRS）

编码是谁做的？开发工程师（开发）
编码是什么是做的，系统人员完成了需求规格说明书（SRS）之后来做的。
编码要做什么内容：
写代码实现需求。


测试时谁来做的？测试工程师（TE）
测试时什么时候做的？开发编码完成后（后面详细讲。）
测试要什么内容:
测试软件，找bug。

维护：
维护工程师/技术支持工程师，关注就是运维版本的升级，解决bug，更新功能。

1.软件生命周期包含哪些阶段？
2.每一个阶段里面是哪些人员，做了哪些事情？


单元测试指的是：
C语言 函数测试。
C++/JAVA 指对类进行测试。

集成测试是指内部模块与模块之间的接口。

验收测试阶段：
1.内部验收测试（α测试）
1)开发、测试人员、设计人员、项目经理，QA。
内部的人员，在可控的环境（开发环境）上进行验收测试，测试的结果可以立即得到反馈。

2.外部验收测试 (β测试)
1）客户、第三方、用户
外部的人员，在外网的环境进行验收测试，测试的结果不能立即得到反馈。


单元测试、集成测试、系统测试之间的关联和区别？
关联和区别。
有一个顺序
单元测试->集成测试->系统测试->验收测试

单元测试针对软件系统的最小单元进行测试。
集成测试考虑模块与模块之间的接口测试
系统测试，从需求的角度考虑每个需求都是否实现并且正确，还要考虑非功能系统指标，比如：性能指标，可靠性指标、安全、兼容、安装、升级，和用户使用手册等等。
验收测试主要让内部客户和外部客户对软件验收进行的一个测试。


维护期：
维护是谁来做的？维护工程师。
维护期什么时候来做？软件版本测试通过并且发布后。
维护：
1.升级版本（开发新的版本主要解决版本运行期发现的bug）
2.新需求开发（开发新的功能）
3.统计和维护每天的系统运行情况。


什么是软件测试：
1.测试软件的bug。
2.测试软件系统是否符合需求。
3.测试软件的是否满足客户需求（隐藏）。

软件测试的目的？
1.证明软件可用
2.找bug
3.预防bug

预防bug
测试人员提前介入项目。

项目早期：开发对项目还不够熟悉，测试主要找致命或严重的bug。
项目中期：整个项目比较稳定，测试证明软件是否可用
项目末期：软件的质量基本ok，可通过外部测试或者bug大扫除找遗漏的bug


错误：人为操作的，这种一般不属于缺陷。
缺陷：按正常的操作了，但是结果返回的是错误。
故障：比如闪退，崩溃，属于 缺陷。
失效：属于缺陷。


缺陷、故障、失效的区别
缺陷是软件内隐藏的问题
缺陷诱发出来产生故障
故障不能很好处理就可能导致失效

研发部门分为3个子部门：
开发部：BA（需求分析人员） SA/SE（系统架构师） UI 美工（开发设计） 开发
测试部：测试工程师（TE） TPM（测试经理） TSE（测试系统架构师）QC(质量控制)
质量部：QA（质量保证）  CMO（配置管理员）

2/8原理:
1.80%的bug都集中在20%的代码模块里。
2.80%收入都集中在20%人员里。
3.80%曾经发现的错误的地方，里面一定还有20%的错误。




1瀑布模型：
优点：流程比较稳定，整个研发的体系是很稳定。
缺点：
1.测试介入太晚，没有办法预防bug。
2.客户相对较晚才能看到软件系统。
3.从研发人员角度，也希望尽快能跟客户确认做的软件是否符合客户需要的。

开发：
概要设计（HLD）
详细设计（LLD）


设计顺序：ST-->IT-->UT
执行顺序：UT（单元测试）-->IT（集成测试）-->ST（系统测试）

1.敏捷模型：
1）需求任务非常细小，文档非常少
2）人员的技术水平都要求比较高。
3）结对编程（测试和开发结对）
4）节奏非常快，两个星期发布一次。
5）人员精简
6）持续集成

检测开发已提交代码-》开始自动更新代码库并进行编译 打包，生成测试版本-》测试环境获取新发布的版本进行自动化安装环境-》自动化进行全量回归验证（策略）-》生成测试报告-》自动分析有问题的模块属于哪个责任人，并将相关的错误报告发送给这个人。

测试方案的目的：
1.针对复杂的需求要写方案，主要为了细化测试点，提取测试点，方便后续写测试用例。
2.非功能性测试要写方案，性能测试，可靠性、安全、兼容等等。
3.测试方案参考文档：测试计划、srs、HLD和LLD。

测试实现/实施主要做了一件事情：写测试用例。
写测试用例要参考哪些文档：
测试方案、srs、HLD和LLD、测试计划

测试执行：
1.搭建测试环境：
测试人员自己搭建测试环境，参考环境搭建说明文档（来源开发）。

执行测试就是参考的测试用例。

当发现了软件bug后要提交缺陷报告（提交bug单），发现缺陷后立即提交缺陷报告，
不要等到第二天或则以后再提。

测试完成之后就要写一个测试报告，测试报告（软件项目的测试报告）测试经理来写的。
多少人测试的
测试时间
发现bug
编写用例
执行的用例
存活的bug，没有修改完的bug，跟开发经理协商过的，需求分析师确认
证明软件可以发布。

测试经理写，主发送给项目经理，抄送给开发经理，QA CMO

回归测试的含义？
有两层含义，第一层验证bug是否修复正确。
第二层含义，验证修改之后是否引入新的bug，验证除了bug修改的以外的地方。
回归测试为什么没有写到测试的4个阶段里面？
回归测试是一个测试动作，所以不属于任何测试阶段，但是可能发生在任何测试阶段。

1.验证开发是否把bug修改正确的过程
2.再次验证版本已经有的功能或则旧的的用例。


1.阿尔法α测试：
在内部人员进行验收，内部人员包括：开发 测试 QA 项目经理或则是特邀的客户。
测试环境：在受控的环境上，受控的意见在开发的电脑上进行测试。
测试过程中：当有问题或则疑问的时候，开发可以立即定位和解答。

2.贝塔β测试：
在外部的人员进行验收，外部人员包括：第三方验收机构，客户亲自参与验收，实际的用户。
测试环境：在不受控的环境，不受控就是指环境在公网（inter网上）。
测试过程中：当有问题或则疑问的时候，没有开发人员可以立即定位和解答。


阿尔法测试和贝塔测试的区别：
1。阿尔法测试是在受控的环境上，由内部人员进行验收测试，并且发现问题立即能得到解决。
2.贝塔测试在不受控（公网）的环境上，由外部人员（客户、实际的用户）进行验收测试，发现问题了没有办法立即解决。

单元测试：参考文档LLD ，关注函数功能和内部逻辑，可以使用白盒测试也可以使用黑盒测试。
集成测试：参考文档HLD，关注内部接口，使用黑盒测试。
系统测试：参考文档SRS，关注的整个系统特性或则是需求功能，使用黑盒测试设计。



单元测试、集成测试、系统测试之间的关系：
1.从测试的深入系统的层次来讲：
最底层就是单元测试
中间层的就是集成测试
最上层的就是系统测试。

2.从测试难度和范围来讲：
1.单元测试最简单，也是范围最小的。
2.集成其次。
3.系统测试是最复杂，也是范围最大的。


测试活动需要关注和理解的文档内容：（测试计划、测试设计、测试实现、测试执行）
1.什么文档是谁写的？
2.这个文档的内容包含哪些？
3.编写这个文档需要参考的什么文档？
4.这个文档谁会关注（谁需要去看）？

需求规格说明书：描述了软件需要做什么功能？

回归测试为什么没有放到4个测试阶段里来讲？